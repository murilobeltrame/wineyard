version: "3"

services:
  app:
    build:
      context: app
      dockerfile: Dockerfile
      args:
        - ROOT_CONFIG_URL=//localhost:9000/wineyard-root-config.js
        - SCAFFOLD_MFE_URL=//localhost:9001/wineyard-app-scaffold.js
        - COUNTRIES_MFE_URL=//localhost:9002/wineyard-countries.js
        - GRAPES_MFE_URL=//localhost:9003/wineyard-grapes.js
        - WINES_MFE_URL=//localhost:9004/wineyard-wines.js
    ports:
      - 9000:80
  app-scaffold:
    build:
      context: app-scaffold
      dockerfile: Dockerfile
    ports:
      - 9001:80
  countries:
    build:
      context: countries/frontend
      dockerfile: Dockerfile
      args:
        - BACKEND_URL=http://localhost:8082
    ports:
      - 9002:80
  grapes:
    build:
      context: grapes/frontend
      dockerfile: Dockerfile
      args:
        - BACKEND_URL=http://localhost:8083
    ports:
      - 9003:80
  wines:
    build:
      context: wines/frontend
      dockerfile: Dockerfile
      args:
        - BACKEND_URL=http://localhost:8084
    ports:
      - 9004:80
  countries-api:
    build:
      context: countries/backend/Countries.Api
      dockerfile: Dockerfile
    depends_on:
      mssql:
        condition: service_healthy
    environment:
      - ASPNETCORE_ConnectionStrings:CountriesDb=Server=mssql;Database=Countries;User Id=sa;Password=${MSSQL_PASSWORD};TrustServerCertificate=True;
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
    ports:
      - "8082:80"
  grapes-api:
    build:
      context: grapes/backend/Grapes.Api
      dockerfile: Dockerfile
    depends_on:
      mssql:
        condition: service_healthy
    environment:
      - ASPNETCORE_ConnectionStrings:GrapesDb=Server=mssql;Database=Grapes;User Id=sa;Password=${MSSQL_PASSWORD};TrustServerCertificate=True;
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
    ports:
      - "8083:80"
  wines-api:
    build:
      context: wines/backend/Wines.Api
      dockerfile: Dockerfile
    depends_on:
      mssql:
        condition: service_healthy
    environment:
      - ASPNETCORE_ConnectionStrings:WinesDb=Server=mssql;Database=Wines;User Id=sa;Password=${MSSQL_PASSWORD};TrustServerCertificate=True;
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
    ports:
      - "8084:80"
  mssql:
    image: mcr.microsoft.com/mssql/server:2022-latest
    healthcheck:
      test:
        [
          "CMD",
          "/opt/mssql-tools/bin/sqlcmd",
          "-Usa",
          "-P${MSSQL_PASSWORD}",
          "-Q",
          "select 1",
        ]
      interval: 1s
      retries: 30
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=${MSSQL_PASSWORD}
    ports:
      - "14333:1433"
  # otel-collector:
  #   image: otel/opentelemetry-collector-contrib
  #   volumes:
  #     - ./otel-collector-config.yaml:/etc/otelcol-contrib/config.yaml
  #   ports:
  #     - 1888:1888 # pprof extension
  #     - 8888:8888 # Prometheus metrics exposed by the Collector
  #     - 8889:8889 # Prometheus exporter metrics
  #     - 13133:13133 # health_check extension
  #     - 4317:4317 # OTLP gRPC receiver
  #     - 4318:4318 # OTLP http receiver
  #     - 55679:55679 # zpages extension

  # kibana:
  #   image: docker.elastic.co/kibana/kibana:7.11.2
  #   depends_on:
  #     elasticsearch:
  #       condition: service_healthy
  #   environment:
  #     ELASTICSEARCH_URL: http://elasticsearch:9200
  #     ELASTICSEARCH_HOSTS: http://elasticsearch:9200
  #   ports:
  #     - 5601:5601
  #   healthcheck:
  #     interval: 10s
  #     retries: 20
  #     test: curl --write-out 'HTTP %{http_code}' --fail --silent --output /dev/null http://localhost:5601/api/status

  # elasticsearch:
  #   image: docker.elastic.co/elasticsearch/elasticsearch:7.11.2
  #   environment:
  #     - bootstrap.memory_lock=true
  #     - cluster.name=docker-cluster
  #     - cluster.routing.allocation.disk.threshold_enabled=false
  #     - discovery.type=single-node
  #     # - ES_JAVA_OPTS=-XX:UseAVX=2 -Xms1g -Xmx1g
  #   ulimits:
  #     memlock:
  #       hard: -1
  #       soft: -1
  #   ports:
  #     - 9200:9200
  #   healthcheck:
  #     interval: 20s
  #     retries: 10
  #     test: curl -s http://localhost:9200/_cluster/health | grep -vq '"status":"red"'
